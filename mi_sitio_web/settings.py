"""
Django settings for mi_sitio_web project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path
import dj_database_url # ¡Nueva importación para Railway!

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
### IMPORTANTE: Asegúrate de que esta variable de entorno exista en Railway (generada o pegada). ###
# Si no está definida en el entorno (ej. desarrollo local), usará un valor por defecto.
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-tu_clave_secreta_local_muy_larga_y_unica_si_corres_sin_env')


# SECURITY WARNING: don't run with debug turned on in production!
### IMPORTANTE: DEBUG será False en Railway (configurado en las variables de entorno). ###
# Para desarrollo local, puedes dejarlo en True.
DEBUG = os.environ.get('DJANGO_DEBUG', 'True') == 'True' # Esto permite controlarlo con DJANGO_DEBUG=False en Railway
# O, de forma más simple, si no quieres una variable extra, puedes usar:
# DEBUG = (os.environ.get('RAILWAY_ENVIRONMENT') is None) # True si no estás en Railway, False si sí.
# Pero lo dejamos como está, es flexible.


# ALLOWED_HOSTS para tu aplicación en Railway
### IMPORTANTE: Añade tus dominios de Railway y cualquier otro si los tienes. ###
ALLOWED_HOSTS = [
    '127.0.0.1',                # Para desarrollo local
    'localhost',                # Para desarrollo local
    '.railway.app',             # Comodín para cualquier subdominio de Railway
    # Si sabes tu URL final de Railway, puedes añadirla aquí también:
    # 'tu-proyecto.up.railway.app',
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Tus aplicaciones aquí:
    'blog', # Ejemplo: Tu aplicación de blog
    # ... otras apps si tienes ...
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # ¡CRÍTICO! DEBE IR AQUÍ para Whitenoise.
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

### IMPORTANTE: Asegúrate de que 'mi_sitio_web' sea el nombre de tu proyecto principal. ###
ROOT_URLCONF = 'mi_sitio_web.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

### IMPORTANTE: Asegúrate de que 'mi_sitio_web' sea el nombre de tu proyecto principal. ###
WSGI_APPLICATION = 'mi_sitio_web.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

### ¡NUEVA CONFIGURACIÓN DE BASE DE DATOS PARA RAILWAY CON DJ-DATABASE-URL! ###
DATABASES = {
    'default': dj_database_url.config(
        # 'default' si DATABASE_URL no está definida (para desarrollo local con SQLite)
        default='sqlite:///' + str(BASE_DIR / 'db.sqlite3'),
        conn_max_age=600, # Mantener conexiones abiertas para eficiencia
        conn_health_checks=True, # Verificar salud de la conexión
    )
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'es-ar' # Configurado para Argentina, Buenos Aires
TIME_ZONE = 'America/Argentina/Buenos_Aires' # ¡Zona horaria de Buenos Aires!
USE_I18N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

### IMPORTANTE: Configuración para servir archivos estáticos con Whitenoise en Railway. ###
STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = []

# ¡Esta línea es CRÍTICA para que Whitenoise sirva los archivos recolectados!
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"


# Media files (archivos subidos por usuarios, ej. imágenes de posts)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media') # Directorio donde se guardarán los archivos subidos


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'