"""
Django settings for mi_sitio_web project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path
from urllib.parse import urlparse # Necesario para parsear la URL de la base de datos

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
### IMPORTANTE ###
# La SECRET_KEY se obtendrá de las variables de entorno de Render.
# Si no está definida en el entorno (ej. desarrollo local), usará un valor por defecto.
# ¡En Render, asegúrate de tener una variable de entorno llamada SECRET_KEY con un valor MUY SEGURO!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-tu_clave_secreta_local_muy_larga_y_unica_si_corres_sin_env')


# SECURITY WARNING: don't run with debug turned on in production!
### IMPORTANTE ###
# DEBUG será False en Render. Se controla con una variable de entorno.
DEBUG = os.environ.get('DJANGO_DEBUG', 'True') == 'True'


# ALLOWED_HOSTS para tu aplicación en Render
### IMPORTANTE ###
# Añade tu dominio de Render EXACTO aquí. '.onrender.com' es un comodín.
ALLOWED_HOSTS = [
    '127.0.0.1',                # Para desarrollo local
    'localhost',                # Para desarrollo local
    'agusp80.pythonanywhere.com', # Si aún usas PythonAnywhere
    '.onrender.com',            # Comodín para cualquier subdominio de Render
    'mi-blog-django-agus.onrender.com', # ¡Tu URL específica de Render!
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles', # ¡CRÍTICO para servir estáticos!
    # Tus aplicaciones aquí:
    'blog', # Ejemplo: Tu aplicación de blog
    # ... otras apps si tienes ...
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # ¡CRÍTICO! DEBE IR AQUÍ.
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

### IMPORTANTE ###
# Asegúrate de que 'mi_sitio_web' sea el nombre de tu proyecto principal.
ROOT_URLCONF = 'mi_sitio_web.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

### IMPORTANTE ###
# Asegúrate de que 'mi_sitio_web' sea el nombre de tu proyecto principal.
WSGI_APPLICATION = 'mi_sitio_web.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

### IMPORTANTE ###
# Configuración de la base de datos PostgreSQL de Supabase.
# La DATABASE_URL se pasa como variable de entorno en Render.
DATABASE_URL = os.environ.get('DATABASE_URL')

if DATABASE_URL:
    db_url = urlparse(DATABASE_URL)
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': db_url.path[1:],
            'USER': db_url.username,
            'PASSWORD': db_url.password,
            'HOST': db_url.hostname,
            'PORT': db_url.port,
        }
    }
else:
    # Fallback para desarrollo local (SQLite) si DATABASE_URL no está definida.
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'es-ar' # Configurado para Argentina
TIME_ZONE = 'America/Argentina/Buenos_Aires' # ¡Zona horaria de Buenos Aires!
USE_I18N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

### IMPORTANTE ###
# Configuración para servir archivos estáticos con Whitenoise en Render.
STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = []

# ¡Esta línea es CRÍTICA para que Whitenoise sirva los archivos recolectados!
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"


# Media files (archivos subidos por usuarios, ej. imágenes de posts)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media') # Directorio donde se guardarán los archivos subidos


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'